import React, { useState, useRef, useEffect } from 'react';

const TimePicker = ({ value, onChange, disabled, placeholder = "09:30" }) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π –≤–≤–æ–¥
  const formatTimeInput = (inputValue) => {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –¥–≤–æ–µ—Ç–æ—á–∏—è
    let cleaned = inputValue.replace(/[^\d:]/g, '');
    
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ, —Ä–∞–±–æ—Ç–∞–µ–º —Å –≥–æ—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    if (cleaned.includes(':')) {
      const parts = cleaned.split(':');
      if (parts.length === 2) {
        const hours = parseInt(parts[0]) || 0;
        const minutes = parseInt(parts[1]) || 0;
        const validHours = Math.min(hours, 23);
        const validMinutes = Math.min(minutes, 59);
        return `${validHours.toString().padStart(2, '0')}:${validMinutes.toString().padStart(2, '0')}`;
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const numbers = cleaned.replace(/:/g, '');
    
    if (numbers.length === 0) return '';
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–≥–æ –¥–æ 4 —Ü–∏—Ñ—Ä
    const limitedNumbers = numbers.slice(0, 4);
    
    if (limitedNumbers.length <= 2) {
      // 1-2 —Ü–∏—Ñ—Ä—ã: —Ç–æ–ª—å–∫–æ —á–∞—Å—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      const hours = parseInt(limitedNumbers) || 0;
      if (hours > 23) return '23';
      return limitedNumbers;
    } else if (limitedNumbers.length === 3) {
      // 3 —Ü–∏—Ñ—Ä—ã: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –ù–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ö–æ—Ç–µ—Ç—å –≤–≤–µ—Å—Ç–∏ 4-—é —Ü–∏—Ñ—Ä—É
      return limitedNumbers;
    } else {
      // 4 —Ü–∏—Ñ—Ä—ã: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ HH:MM
      const hours = parseInt(limitedNumbers.slice(0, 2));
      const minutes = parseInt(limitedNumbers.slice(2, 4));
      
      const validHours = Math.min(hours, 23);
      const validMinutes = Math.min(minutes, 59);
      
      return `${validHours.toString().padStart(2, '0')}:${validMinutes.toString().padStart(2, '0')}`;
    }
  };

  const handleInputChange = (e) => {
    const formatted = formatTimeInput(e.target.value);
    onChange(formatted);
  };

  const handleTimeSelect = (timeString) => {
    onChange(timeString);
    setIsOpen(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è dropdown
  const handleManualTimeChange = (timeString) => {
    onChange(timeString);
    // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º dropdown –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
  const quickTimes = [
    '08:00', '09:00', '10:00', '11:00', '12:00', '13:00',
    '14:00', '15:00', '16:00', '17:00', '18:00', '19:00'
  ];

  return (
    <div className="relative w-full" ref={dropdownRef}>
      <div className="flex w-full">
        <input
          type="text"
          value={value || ''}
          onChange={handleInputChange}
          disabled={disabled}
          placeholder={placeholder}
          className="flex-1 form-input text-sm rounded-l rounded-r-none min-w-[100px]" style={{borderRight: 'none'}}
          maxLength={5}
        />
        <button
          type="button"
          onClick={() => setIsOpen(!isOpen)}
          disabled={disabled}
          className="bg-slate-800/60 backdrop-blur-sm border border-l-0 border-slate-600/50 rounded-r px-3 py-2 text-slate-400 hover:text-slate-100 hover:bg-slate-700/60 transition-colors focus:outline-none"
          title="–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è"
        >
          üïê
        </button>
      </div>

      {isOpen && !disabled && (
        <div className="absolute top-full left-0 mt-1 bg-slate-800/90 backdrop-blur-xl border border-slate-600/50 rounded-lg shadow-2xl z-50 w-80 min-w-max">
          <div className="p-4">
            <div className="text-xs text-slate-400 mb-4 text-center font-medium">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</div>
            
            {/* –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä */}
            <div className="grid grid-cols-4 gap-2 mb-4">
              {quickTimes.map((time) => (
                <button
                  key={time}
                  onClick={() => handleTimeSelect(time)}
                  className={`px-3 py-2 text-sm rounded-md transition-all duration-200 whitespace-nowrap ${
                    value === time 
                      ? 'bg-slate-600 text-slate-100 shadow-md' 
                      : 'bg-slate-700/60 text-slate-300 hover:bg-slate-600/60 hover:text-slate-100 border border-slate-600/50'
                  }`}
                >
                  {time}
                </button>
              ))}
            </div>

            {/* –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ */}
            <div className="border-t border-slate-700/50 pt-4">
              <div className="text-xs text-slate-400 mb-3">–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:</div>
              <div className="flex gap-3 items-center justify-center">
                <div className="flex flex-col items-center gap-1">
                  <label className="text-xs text-slate-500">–ß–∞—Å—ã</label>
                  <input
                    type="number"
                    min="0"
                    max="23"
                    placeholder="–ß–ß"
                    value={value?.split(':')[0] || ''}
                    maxLength="2"
                    className="w-20 bg-slate-800/60 backdrop-blur-sm border border-slate-600/50 rounded px-3 py-2 text-sm text-slate-100 text-center focus:outline-none focus:ring-2 focus:ring-slate-500/50"
                    onInput={(e) => {
                      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 —Å–∏–º–≤–æ–ª–æ–≤
                      if (e.target.value.length > 2) {
                        e.target.value = e.target.value.slice(0, 2);
                      }
                    }}
                    onChange={(e) => {
                      const inputValue = e.target.value;
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ 1-2 —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
                      if (inputValue === '' || (inputValue.length <= 2 && parseInt(inputValue) >= 0 && parseInt(inputValue) <= 23)) {
                        const hours = inputValue ? inputValue.padStart(2, '0') : '00';
                        const currentMinutes = value?.split(':')[1] || '00';
                        handleManualTimeChange(`${hours}:${currentMinutes}`);
                      }
                    }}
                  />
                </div>
                <div className="text-slate-400 text-lg mt-6">:</div>
                <div className="flex flex-col items-center gap-1">
                  <label className="text-xs text-slate-500">–ú–∏–Ω—É—Ç—ã</label>
                  <input
                    type="number"
                    min="0"
                    max="59"
                    placeholder="–ú–ú"
                    value={value?.split(':')[1] || ''}
                    maxLength="2"
                    className="w-20 bg-slate-800/60 backdrop-blur-sm border border-slate-600/50 rounded px-3 py-2 text-sm text-slate-100 text-center focus:outline-none focus:ring-2 focus:ring-slate-500/50"
                    onInput={(e) => {
                      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 —Å–∏–º–≤–æ–ª–æ–≤
                      if (e.target.value.length > 2) {
                        e.target.value = e.target.value.slice(0, 2);
                      }
                    }}
                    onChange={(e) => {
                      const inputValue = e.target.value;
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ 1-2 —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
                      if (inputValue === '' || (inputValue.length <= 2 && parseInt(inputValue) >= 0 && parseInt(inputValue) <= 59)) {
                        const minutes = inputValue ? inputValue.padStart(2, '0') : '00';
                        const currentHours = value?.split(':')[0] || '00';
                        handleManualTimeChange(`${currentHours}:${minutes}`);
                      }
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TimePicker;
