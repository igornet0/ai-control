import React, { useState, useEffect } from 'react';
import { teamService } from '../../../../services/teamService';
import { useNavigate } from 'react-router-dom';
import useAuth from '../../../../hooks/useAuth';
import CreateTeamModal from './components/CreateTeamModal';
import TeamCard from './components/TeamCard';
import styles from './Teams.module.css';

const Teams = () => {
  const [teams, setTeams] = useState([]);
  const [filteredTeams, setFilteredTeams] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [showMyTeams, setShowMyTeams] = useState(false);
  
  const navigate = useNavigate();
  const { user, loading: userLoading } = useAuth();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
  const loadTeams = async () => {
    try {
      setLoading(true);
      console.log('Loading teams...');
      const teamsData = await teamService.getTeams();
      console.log('Teams loaded:', teamsData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ teamsData —ç—Ç–æ –º–∞—Å—Å–∏–≤
      if (Array.isArray(teamsData)) {
        setTeams(teamsData);
        setFilteredTeams(teamsData);
        setError(null);
      } else {
        console.error('Teams data is not an array:', teamsData);
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥');
        setTeams([]);
        setFilteredTeams([]);
      }
    } catch (err) {
      console.error('Error loading teams:', err);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–∞–Ω–¥: ${err.message}`);
      setTeams([]);
      setFilteredTeams([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadTeams();
  }, []);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    console.log('User state:', user);
    console.log('User loading:', userLoading);
  }, [user, userLoading]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
  useEffect(() => {
    console.log('Filtering teams...', { teams, searchTerm, statusFilter, showMyTeams, user });
    let filtered = teams;

    // –§–∏–ª—å—Ç—Ä "My Teams" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (showMyTeams && user) {
      filtered = filtered.filter(team => {
        return team.members && team.members.some(member => 
          member.user_id === user.id && member.is_active
        );
      });
    }

    if (searchTerm) {
      filtered = filtered.filter(team =>
        (team.name && team.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (team.description && team.description.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    if (statusFilter) {
      filtered = filtered.filter(team => team.status === statusFilter);
    }

    console.log('Filtered teams:', filtered);
    setFilteredTeams(filtered);
  }, [teams, searchTerm, statusFilter, showMyTeams, user]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
  const handleCreateTeam = async (teamData) => {
    try {
      const newTeam = await teamService.createTeam(teamData);
      setTeams(prev => [newTeam, ...prev]);
      setShowCreateModal(false);
      setError(null);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
      console.error('Error creating team:', err);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
  const handleDeleteTeam = async (teamId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      try {
        await teamService.deleteTeam(teamId);
        setTeams(prev => prev.filter(team => team.id !== teamId));
        setError(null);
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
        console.error('Error deleting team:', err);
      }
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
  const handleUpdateTeam = async (teamId, teamData) => {
    try {
      const updatedTeam = await teamService.updateTeam(teamId, teamData);
      setTeams(prev => prev.map(team => 
        team.id === teamId ? updatedTeam : team
      ));
      setError(null);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
      console.error('Error updating team:', err);
    }
  };

  if (loading || userLoading) {
    console.log('Showing loading state...');
    return (
      <div className={styles['teams-container']}>
        <div className={styles['loading']}>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥...</div>
      </div>
    );
  }

  console.log('Rendering teams page...', { teams, filteredTeams, user, error });

  return (
    <div className="mt-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
        <div className="animate-slideInLeft">
          <h1 className="text-3xl font-bold text-slate-100 tracking-tight flex items-center gap-3">
            üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏
          </h1>
          <p className="text-slate-400 mt-1">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—á–∏–µ –≥—Ä—É–ø–ø—ã</p>
          {user ? (
            <div className="mt-2 flex items-center gap-2">
              <span className="text-sm text-slate-500">–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:</span>
              <span className="px-2 py-1 bg-slate-700/50 text-slate-300 text-sm font-medium rounded-md">
                {teams.filter(team => 
                  team.members && team.members.some(member => 
                    member.user_id === user.id && member.is_active
                  )
                ).length}
              </span>
            </div>
          ) : (
            <div className="mt-2">
              <span className="text-sm text-slate-500">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</span>
            </div>
          )}
        </div>
        <div className="flex flex-wrap gap-3 animate-slideInRight">
          {user ? (
            <button 
              onClick={() => setShowMyTeams(!showMyTeams)}
              className={`btn ${showMyTeams ? 'btn-primary' : 'btn-outline'} transition-all duration-300`}
              title={showMyTeams ? "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã" : "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã"}
            >
              {showMyTeams ? 'üë• –í—Å–µ –∫–æ–º–∞–Ω–¥—ã' : 'üë§ –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã'}
            </button>
          ) : (
            <button 
              className="btn btn-outline opacity-50 cursor-not-allowed"
              disabled
              title="–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
            >
              üë§ –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã
            </button>
          )}
          <button 
            className="btn btn-primary"
            onClick={() => setShowCreateModal(true)}
          >
            ‚ú® –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
          </button>
        </div>
      </div>

      {error && (
        <div className="bg-gradient-to-r from-red-500/20 to-rose-600/20 border border-red-500/30 text-red-300 p-4 rounded-xl mb-6 backdrop-blur-sm">
          <div className="flex items-center justify-between">
            <span>{error}</span>
            <button 
              onClick={() => setError(null)}
              className="text-red-300 hover:text-red-100 transition-colors"
            >
              ‚úï
            </button>
          </div>
        </div>
      )}

      <div className="flex flex-col sm:flex-row gap-4 mb-6">
        <div className="flex-1">
          <input
            type="text"
            placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="form-input w-full"
          />
        </div>

        <div className="sm:w-48">
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="form-input w-full"
          >
            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
            <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
            <option value="archived">–ê—Ä—Ö–∏–≤–Ω—ã–µ</option>
            <option value="disbanded">–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
          </select>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {filteredTeams.length === 0 ? (
          <div className="col-span-full text-center py-16">
            <div className="text-6xl mb-4 opacity-50">üë•</div>
            <div className="text-slate-400 text-lg mb-2">
              {!user ? '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...' :
                showMyTeams 
                  ? '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ' 
                  : searchTerm || statusFilter 
                    ? '–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' 
                    : '–ö–æ–º–∞–Ω–¥—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã'
              }
            </div>
            {!showMyTeams && !searchTerm && !statusFilter && (
              <p className="text-slate-500 text-sm">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
            )}
          </div>
        ) : (
          filteredTeams.map((team, index) => (
            <div 
              key={team.id} 
              className="animate-fadeIn"
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              <TeamCard
                team={team}
                onDelete={handleDeleteTeam}
                onUpdate={handleUpdateTeam}
              />
            </div>
          ))
        )}
      </div>

      {showCreateModal && (
        <CreateTeamModal
          onClose={() => setShowCreateModal(false)}
          onSubmit={handleCreateTeam}
        />
      )}
    </div>
  );
};

export default Teams;
