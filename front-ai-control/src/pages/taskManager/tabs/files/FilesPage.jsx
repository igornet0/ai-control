import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import useAuth from '../../../../hooks/useAuth';
import { listProjectFiles, addFileToFavorites, removeFileFromFavorites, listFavoriteFiles, downloadProjectFile } from '../../../../services/filesService';
import { authFetch } from '../../../../services/http';

export default function FilesPage() {
  const { user } = useAuth();
  const navigate = useNavigate();

  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(false);
  const [query, setQuery] = useState('');
  const [sortConfig, setSortConfig] = useState({ field: 'name', direction: 'asc' });
  const [tab, setTab] = useState('all'); // all | my | favorites



  const handleSort = (field) => {
    setSortConfig((prev) => {
      // –ï—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ —Ç–æ –∂–µ –ø–æ–ª–µ, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      if (prev.field === field) {
        return {
          field,
          direction: prev.direction === "asc" ? "desc" : "asc",
        };
      }
      // –ï—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –Ω–æ–≤–æ–µ –ø–æ–ª–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
      return {
        field,
        direction: "asc",
      };
    });
  };

  const fetchData = async () => {
    setItems([]);
    setLoading(true);
    try {
      let data;
      
      if (tab === 'favorites') {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        data = await listFavoriteFiles({
          search: query,
          sortBy: sortConfig.field === 'type' ? 'type' : sortConfig.field === 'size' ? 'size' : sortConfig.field === 'name' ? 'name' : 'added_at',
          sortOrder: sortConfig.direction,
          limit: 10
        });
      } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –º–æ–∏ —Ñ–∞–π–ª—ã
        const params = new URLSearchParams();
        if (query) params.set('search', query);
        params.set('sort_by', sortConfig.field === 'type' ? 'type' : sortConfig.field === 'size' ? 'size' : sortConfig.field === 'name' ? 'name' : 'uploaded_at');
        params.set('sort_order', sortConfig.direction);
        if (tab === 'my') params.set('only_my', 'true');
        params.set('limit', '50'); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        try {
          data = await authFetch(`/api/projects/all-attachments?${params.toString()}`);
          console.log('Files data loaded:', data);
        } catch (apiError) {
          console.error('API Error:', apiError);
          // –ï—Å–ª–∏ —ç—Ç–æ 401 –∏–ª–∏ 403, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (apiError.response?.status === 401) {
            throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤');
          } else if (apiError.response?.status === 403) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤');
          } else {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
          }
        }
      }
      
      const items = (data && data.items) || [];
      setItems(items);
      console.log(`Loaded ${items.length} files for tab "${tab}"`);
      
    } catch (error) {
      console.error('Error fetching files:', error);
      setItems([]);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (error.message) {
        alert(error.message);
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { fetchData(); // eslint-disable-next-line
  }, [query, sortConfig.field, sortConfig.direction, tab]);

  const onToggleFavorite = async (projectId, filename, isFav) => {
    try {
      if (isFav) {
        await removeFileFromFavorites({ projectId, filename });
      } else {
        await addFileToFavorites({ projectId, filename });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
      await fetchData();
    } catch (error) {
      console.error('Error toggling favorite:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
    }
  };

  const onDownload = (filename, pid) => {
    downloadProjectFile({ projectId: pid, filename });
  };



  return (
    <div className="mt-6">
      <div className="mb-4">
        <h1 className="text-2xl font-bold text-gray-100">–§–∞–π–ª—ã</h1>
      </div>
        <div className="flex items-center gap-3 mb-4">
          <div className="header-tabs ml-3">
            <button className={`tab-button ${tab==='all'?'active':''}`} onClick={() => setTab('all')}>–í—Å–µ —Ñ–∞–π–ª—ã</button>
            <button className={`tab-button ${tab==='my'?'active':''}`} onClick={() => setTab('my')}>–ú–æ–∏ —Ñ–∞–π–ª—ã</button>
            <button className={`tab-button ${tab==='favorites'?'active':''}`} onClick={() => setTab('favorites')}>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã</button>
          </div>
        </div>

        <div className="flex flex-wrap gap-3 mb-4 items-center">
          <input
            className="flex-1 bg-[#0D1414] border border-gray-700 rounded px-3 py-2"
            placeholder="–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
          />
          <button onClick={fetchData} className="bg-green-700 px-4 py-2 rounded">–û–±–Ω–æ–≤–∏—Ç—å</button>
        </div>

        {loading ? (
          <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        ) : (
          <div className="overflow-auto">
            <div className="text-xs text-gray-400 mb-2 px-2">
              üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤. –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞.
              {sortConfig.field && (
                <span className="ml-2 text-green-400">
                  –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ: <strong>{sortConfig.field}</strong> ({sortConfig.direction === "asc" ? "–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é" : "–ø–æ —É–±—ã–≤–∞–Ω–∏—é"})
                </span>
              )}
            </div>
            <table className="w-full text-left text-gray-200">
              <thead>
                <tr className="text-gray-400">
                  <th className="py-2">–ü—Ä–æ–µ–∫—Ç</th>
                  <th 
                    className="py-2 cursor-pointer hover:bg-[#1A2B24] transition-colors"
                    onClick={() => handleSort("name")}
                  >
                    <div className="flex items-center justify-between">
                      –ò–º—è
                      <span className="ml-2 text-green-400">
                        {sortConfig.field === "name" ? (sortConfig.direction === "asc" ? "‚Üë" : "‚Üì") : "‚Üï"}
                      </span>
                    </div>
                  </th>
                  <th 
                    className="py-2 cursor-pointer hover:bg-[#1A2B24] transition-colors"
                    onClick={() => handleSort("type")}
                  >
                    <div className="flex items-center justify-between">
                      –¢–∏–ø
                      <span className="ml-2 text-green-400">
                        {sortConfig.field === "type" ? (sortConfig.direction === "asc" ? "‚Üë" : "‚Üì") : "‚Üï"}
                      </span>
                    </div>
                  </th>
                  <th 
                    className="py-2 cursor-pointer hover:bg-[#1A2B24] transition-colors"
                    onClick={() => handleSort("size")}
                  >
                    <div className="flex items-center justify-between">
                      –†–∞–∑–º–µ—Ä
                      <span className="ml-2 text-green-400">
                        {sortConfig.field === "size" ? (sortConfig.direction === "asc" ? "‚Üë" : "‚Üì") : "‚Üï"}
                      </span>
                    </div>
                  </th>
                  <th className="py-2">–ó–∞–≥—Ä—É–∂–µ–Ω–æ</th>
                  <th 
                    className="py-2 cursor-pointer hover:bg-[#1A2B24] transition-colors"
                    onClick={() => handleSort("uploaded_at")}
                  >
                    <div className="flex items-center justify-between">
                      –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                      <span className="ml-2 text-green-400">
                        {sortConfig.field === "uploaded_at" ? (sortConfig.direction === "asc" ? "‚Üë" : "‚Üì") : "‚Üï"}
                      </span>
                    </div>
                  </th>
                  <th className="py-2">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</th>
                  <th className="py-2">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {items.length === 0 ? (
                  <tr>
                    <td colSpan="8" className="py-8 text-center text-gray-400">
                      {tab === 'favorites' && '–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'}
                      {tab === 'my' && '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'}
                      {tab === 'all' && '–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                      <div className="mt-2 text-sm">
                        {tab === 'all' && '–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤'}
                        {tab === 'my' && '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö –∑–¥–µ—Å—å'}
                        {tab === 'favorites' && '–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö –∑–¥–µ—Å—å'}
                      </div>
                    </td>
                  </tr>
                ) : (
                  items.map((f)=> (
                    <tr key={f.project_id+'/'+f.filename} className="border-t border-gray-800">
                      <td className="py-2">{f.project_name || f.project_id}</td>
                      <td className="py-2 break-all">{f.filename}</td>
                      <td className="py-2">{f.content_type || '-'}</td>
                      <td className="py-2">{(f.size || 0).toLocaleString()} B</td>
                      <td className="py-2">{f.uploaded_by || '-'}</td>
                      <td className="py-2">{f.uploaded_at || '-'}</td>
                      <td className="py-2">
                        <button 
                          onClick={() => onToggleFavorite(f.project_id, f.filename, f.is_favorite)}
                          className={`px-3 py-1 rounded text-sm ${f.is_favorite ? 'bg-yellow-600 hover:bg-yellow-700' : 'bg-gray-600 hover:bg-gray-700'}`}
                          title={f.is_favorite ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
                          disabled={tab === 'favorites'} // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
                        >
                          {f.is_favorite ? '‚òÖ' : '‚òÜ'}
                        </button>
                      </td>
                      <td className="py-2">
                        <button onClick={()=>onDownload(f.filename, f.project_id)} className="bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded transition-colors">–°–∫–∞—á–∞—Ç—å</button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        )}
    </div>
  );
}
