import React, { useState } from 'react';
import './ProjectCard.css';

const ProjectCard = ({ project, onDelete, onUpdate }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const getStatusColor = (status) => {
    const statusColors = {
      'planning': 'bg-gray-500',
      'active': 'bg-green-500',
      'on_hold': 'bg-yellow-500',
      'completed': 'bg-blue-500',
      'cancelled': 'bg-red-500',
      'archived': 'bg-gray-700'
    };
    return statusColors[status] || 'bg-gray-500';
  };

  const getPriorityColor = (priority) => {
    const priorityColors = {
      'low': 'bg-gray-400',
      'medium': 'bg-blue-400',
      'high': 'bg-yellow-400',
      'critical': 'bg-orange-400',
      'urgent': 'bg-red-400'
    };
    return priorityColors[priority] || 'bg-gray-400';
  };

  const getStatusText = (status) => {
    const statusTexts = {
      'planning': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
      'active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
      'on_hold': '–ù–∞ –ø–∞—É–∑–µ',
      'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
      'archived': '–ê—Ä—Ö–∏–≤–Ω—ã–π'
    };
    return statusTexts[status] || status;
  };

  const getPriorityText = (priority) => {
    const priorityTexts = {
      'low': '–ù–∏–∑–∫–∏–π',
      'medium': '–°—Ä–µ–¥–Ω–∏–π',
      'high': '–í—ã—Å–æ–∫–∏–π',
      'critical': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
      'urgent': '–°—Ä–æ—á–Ω—ã–π'
    };
    return priorityTexts[priority] || priority;
  };

  const formatDate = (dateString) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    return new Date(dateString).toLocaleDateString('ru-RU');
  };

  return (
    <div className="project-card">
      <div className="card-header">
        <div className="project-title">
          <h3>{project.name}</h3>
          <div className="project-badges">
            <span className={`status-badge ${getStatusColor(project.status)}`}>
              {getStatusText(project.status)}
            </span>
            <span className={`priority-badge ${getPriorityColor(project.priority)}`}>
              {getPriorityText(project.priority)}
            </span>
          </div>
        </div>
        <div className="project-actions">
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="expand-btn"
            title={isExpanded ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'}
          >
            {isExpanded ? '‚ñº' : '‚ñ∂'}
          </button>
        </div>
      </div>

      <div className="card-body">
        {project.description && (
          <p className="project-description">
            {project.description}
          </p>
        )}

        <div className="project-info">
          <div className="info-row">
            <span className="info-label">–ú–µ–Ω–µ–¥–∂–µ—Ä:</span>
            <span className="info-value">
              {project.manager_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
            </span>
          </div>
          
          <div className="info-row">
            <span className="info-label">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</span>
            <span className="info-value">
              {formatDate(project.start_date)}
            </span>
          </div>
          
          <div className="info-row">
            <span className="info-label">–°—Ä–æ–∫:</span>
            <span className="info-value">
              {formatDate(project.due_date)}
            </span>
          </div>
          
          <div className="info-row">
            <span className="info-label">–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
            <span className="info-value">
              <div className="progress-bar">
                <div 
                  className="progress-fill" 
                  style={{ width: `${project.progress}%` }}
                ></div>
              </div>
              <span className="progress-text">{project.progress}%</span>
            </span>
          </div>

          {project.budget && (
            <div className="info-row">
              <span className="info-label">–ë—é–¥–∂–µ—Ç:</span>
              <span className="info-value">
                {project.budget.toLocaleString()} ‚ÇΩ
              </span>
            </div>
          )}
        </div>

        {project.tags && project.tags.length > 0 && (
          <div className="project-tags">
            {project.tags.map((tag, index) => (
              <span key={index} className="tag">
                {tag}
              </span>
            ))}
          </div>
        )}

        {isExpanded && (
          <div className="expanded-content">
            {/* –ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ */}
            <div className="project-tasks">
              <h4>–ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ ({project.task_count})</h4>
              {project.tasks && project.tasks.length > 0 ? (
                <div className="tasks-list">
                  {project.tasks.map(task => (
                    <div key={task.id} className="task-item">
                      <div className="task-header">
                        <span className="task-title">{task.title}</span>
                        <span className={`task-status ${getStatusColor(task.status)}`}>
                          {getStatusText(task.status)}
                        </span>
                      </div>
                      <div className="task-details">
                        <span className="task-priority">
                          {getPriorityText(task.priority)}
                        </span>
                        {task.executor_name && (
                          <span className="task-executor">
                            –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.executor_name}
                          </span>
                        )}
                        {task.due_date && (
                          <span className="task-due">
                            –°—Ä–æ–∫: {formatDate(task.due_date)}
                          </span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="no-tasks">–ó–∞–¥–∞—á–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</p>
              )}
            </div>

            {/* –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–µ–∫—Ç–∞ */}
            <div className="project-teams">
              <h4>–ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–µ–∫—Ç–∞ ({project.team_count})</h4>
              {project.teams && project.teams.length > 0 ? (
                <div className="teams-list">
                  {project.teams.map(team => (
                    <div key={team.id} className="team-item">
                      <div className="team-header">
                        <span className="team-name">{team.team_name}</span>
                        <span className="team-role">{team.role}</span>
                      </div>
                      <div className="team-details">
                        <span className="team-joined">
                          –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å: {formatDate(team.joined_at)}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="no-teams">–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã</p>
              )}
            </div>
          </div>
        )}
      </div>

      <div className="card-footer">
        <div className="project-stats">
          <span className="stat">
            üìã {project.task_count} –∑–∞–¥–∞—á
          </span>
          <span className="stat">
            üë• {project.team_count} –∫–æ–º–∞–Ω–¥
          </span>
        </div>
        
        <div className="project-actions">
          <button
            onClick={() => onUpdate(project.id, { status: 'completed' })}
            className="complete-btn"
            title="–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
          >
            ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å
          </button>
          
          <button
            onClick={() => onDelete(project.id)}
            className="delete-btn"
            title="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
          >
            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default ProjectCard;
