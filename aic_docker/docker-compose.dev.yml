# Docker Compose file for development environment

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-control-postgres-dev
    environment:
      POSTGRES_DB: ai_control_dev
      POSTGRES_USER: ai_control_user
      POSTGRES_PASSWORD: ai_control_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ai-control-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-control-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - ai-control-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ai-control-rabbitmq-dev
    environment:
      RABBITMQ_DEFAULT_USER: ai_control_user
      RABBITMQ_DEFAULT_PASS: ai_control_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data_dev:/var/lib/rabbitmq
    networks:
      - ai-control-network

  # Backend API
  backend:
    build:
      context: ..
      dockerfile: aic_docker/Dockerfile.backend
      target: development
    container_name: ai-control-backend-dev
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://ai_control_user:ai_control_password@postgres:5432/ai_control_dev
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://ai_control_user:ai_control_password@rabbitmq:5672/
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    ports:
      - "8000:8000"
    volumes:
      - ../backend:/app/backend
      - ../core:/app/core
      - ../settings:/app/settings
      - ../tests:/app/tests
      - ../alembic.ini:/app/alembic.ini
      - ../pyproject.toml:/app/pyproject.toml
      - ../poetry.lock:/app/poetry.lock
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - ai-control-network
    command: sh -c "sleep 15 && uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload"

  # Frontend React App
  frontend:
    build:
      context: ..
      dockerfile: aic_docker/Dockerfile.frontend
      target: development
    container_name: ai-control-frontend-dev
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ../front-ai-control:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ai-control-network
    # Using CMD from Dockerfile

  # Celery Worker
  celery_worker:
    build:
      context: ..
      dockerfile: aic_docker/Dockerfile.backend
      target: development
    container_name: ai-control-celery-worker-dev
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://ai_control_user:ai_control_password@postgres:5432/ai_control_dev
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://ai_control_user:ai_control_password@rabbitmq:5672/
    volumes:
      - ../backend:/app/backend
      - ../core:/app/core
      - ../settings:/app/settings
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - ai-control-network
    command: celery -A backend.celery_app worker --loglevel=info

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ..
      dockerfile: aic_docker/Dockerfile.backend
      target: development
    container_name: ai-control-celery-beat-dev
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://ai_control_user:ai_control_password@postgres:5432/ai_control_dev
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://ai_control_password@rabbitmq:5672/
    volumes:
      - ../backend:/app/backend
      - ../core:/app/core
      - ../settings:/app/settings
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - ai-control-network
    command: celery -A backend.celery_app beat --loglevel=info

  # Flower (Celery Monitoring)
  flower:
    build:
      context: ..
      dockerfile: aic_docker/Dockerfile.backend
      target: development
    container_name: ai-control-flower-dev
    environment:
      - FLOWER_BASIC_AUTH=admin:admin123
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - rabbitmq
    networks:
      - ai-control-network
    command: celery -A backend.celery_app flower --port=5555

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: ai-control-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - ai-control-network

volumes:
  postgres_data_dev:
  redis_data_dev:
  rabbitmq_data_dev:

networks:
  ai-control-network:
    driver: bridge
