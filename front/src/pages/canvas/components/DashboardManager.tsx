import React, { useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '../store';
import { saveDashboard, loadDashboard, exportDashboard, importDashboard } from '../utils/storage';
import { setDashboard } from '../store/dashboardSlice';
import { setDataSources } from '../store/dataSourceSlice';

export default function DashboardManager() {
  const dispatch = useDispatch();
  const widgets = useSelector((state: RootState) => state.dashboard.widgets);
  const dataSources = useSelector((state: RootState) => state.dataSource.sources);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleSaveLocal = () => {
    saveDashboard({ widgets, dataSources });
    alert('–ú–∞–∫–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ localStorage!');
  };

  const handleLoadLocal = () => {
    const snapshot = loadDashboard();
    if (snapshot) {
      dispatch(setDashboard(snapshot.widgets));
      dispatch(setDataSources(snapshot.dataSources));
      alert('–ú–∞–∫–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ localStorage!');
    } else {
      alert('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –º–∞–∫–µ—Ç–∞!');
    }
  };

  const handleExport = () => {
    exportDashboard({ widgets, dataSources });
  };

  const handleImport = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    importDashboard(file).then(snapshot => {
      dispatch(setDashboard(snapshot.widgets));
      dispatch(setDataSources(snapshot.dataSources));
      alert('–ú–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!');
    }).catch(() => alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞!'));
  };

  return (
    <div style={{ padding: '10px' }}>
      <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–∫–µ—Ç–æ–º</h4>
      <button onClick={handleSaveLocal}>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage</button>
      <button onClick={handleLoadLocal}>üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage</button>
      <button onClick={handleExport}>‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å JSON</button>
      <input type="file" ref={fileInputRef} onChange={handleImport} />
    </div>
  );
}