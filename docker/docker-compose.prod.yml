version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-control-postgres-prod
    environment:
      POSTGRES_DB: ai_control_prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ai-control-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-control-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - ai-control-network
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ai-control-rabbitmq-prod
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data_prod:/var/lib/rabbitmq
    networks:
      - ai-control-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
      target: production
    container_name: ai-control-backend-prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/ai_control_prod
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - ai-control-network
    restart: unless-stopped
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000 --workers 4

  # Frontend React App
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
      target: production
    container_name: ai-control-frontend-prod
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - ai-control-network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
      target: production
    container_name: ai-control-celery-worker-prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/ai_control_prod
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - ai-control-network
    restart: unless-stopped
    command: celery -A backend.celery_app worker --loglevel=info --concurrency=4

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
      target: production
    container_name: ai-control-celery-beat-prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/ai_control_prod
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - ai-control-network
    restart: unless-stopped
    command: celery -A backend.celery_app beat --loglevel=info

  # Flower (Celery Monitoring)
  flower:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
      target: production
    container_name: ai-control-flower-prod
    environment:
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - rabbitmq
    networks:
      - ai-control-network
    restart: unless-stopped
    command: celery -A backend.celery_app flower --port=5555

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: ai-control-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - ai-control-network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-control-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai-control-network
    restart: unless-stopped

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-control-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - ai-control-network
    restart: unless-stopped

volumes:
  postgres_data_prod:
  redis_data_prod:
  rabbitmq_data_prod:
  prometheus_data:
  grafana_data:

networks:
  ai-control-network:
    driver: bridge
